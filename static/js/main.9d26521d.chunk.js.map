{"version":3,"sources":["components/app-info/app-info.js","config/constant.js","components/dropfiles/dropfiles.js","components/checkBoxItem/checkBoxItem.js","components/inputFieldItem/inputFieldItem.js","components/controls/controls.js","components/error/error.js","components/svghmi-preferences/svghmi-preferences.js","components/pages/main.js","components/LoginForm/loginForm.js","components/LoginComponent/loginComponent.js","components/app/app.js","index.js"],"names":["AppInfo","className","API_SERVER","CONFIG_DEFAULT","svgo","name","params","attrs","optimization","delRefs","moveGradients","addDefaults","delGradientTransform","connectBgColor","polyToPath","bgColorId","addFlipInterface","Dropfiles","props","id","files","setFiles","onUploaded","useState","showArrow","setShowArror","onDelete","newFiles","filter","x","length","accept","label","onChange","incommingFiles","value","maxFiles","maxFileSize","url","onUploadFinish","map","file","preview","CheckBoxItem","checked","onClick","section","type","style","display","htmlFor","width","height","viewBox","points","InputFieldItem","labels","header","e","target","replace","split","Controls","downloadId","optimized","onOptimize","uploaded","loader","onDownload","fetch","res","blob","element","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","console","error","spanClass","spanText","btnClass","Error","text","SvghmiPreferences","config","onConfigChanged","ShowColorControl","removeIds","forEach","elem","str","slice","includes","Main","setState","optimizeFiles","conf","ids","state","optimizeConf","options","method","headers","JSON","stringify","clientId","response","json","status","prevState","uuidv4","join","prev","newConf","push","data","mode","log","this","Component","LoginForm","Input","disabled","placeholder","onSubmit","LoginComponent","newMode","toggleMode","bind","App","exact","path","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d26521d.chunk.js","sourcesContent":["import \"./app-info.css\";\n\nconst AppInfo = () => {\n    return (\n        <div className=\"app-info\">\n            <h1>A simple tool for creating dynamic widgets (SVGHMI)</h1>\n            <p className=\"infoBlock\">With this tool your can easily convert your SVG files to Siemens WinCC Unified format <i>SVGHMI</i> and create dynamic widgets in just a couple of steps</p>\n            <ul>\n                <li>First of all you need some svg file for convertion</li>\n                <li>Choose or Drag'n'Drop you files into field below</li>\n                <li>Push upload button</li>\n                <li>Push Convert button</li>\n                <li>And finaly download your ready zip archive</li>\n            </ul>\n            <p className=\"infoBlock\">If you want more flexibility you can tune convertion process with some options</p>\n        </div>\n    )\n}\n\nexport default AppInfo;","export const BASE_TITLE = 'SVG to SVGHMI';\n// export const API_SERVER = 'http://localhost:2800/';\n// export const API_SERVER = 'http://192.168.7.141:2800/';\nexport const API_SERVER = 'https://server.cirillsokolov.com:2800/';\nexport const CONFIG_DEFAULT = {\n    svgo: [\n        'convertStyleToAttrs',\n        'removeUnusedNS',\n        'convertColors',\n        'removeEditorsNSData',\n        'removeDoctype',\n        'removeDimensions',\n        'removeMetadata',\n        'sortDefsChildren',\n        'sortAttrs',\n        'moveGroupAttrsToElems',\n        {\n            name: 'removeAttrs',\n            params: {\n                attrs: '(sketch)',\n            },\n        },\n    ],\n    optimization: {\n        delRefs: true,\n        moveGradients: true,\n        addDefaults: true,\n        delGradientTransform: true,\n        connectBgColor: true,\n        polyToPath: true,\n        bgColorId: ['bgColor'],\n        addFlipInterface: true,\n    }\n}","import { Dropzone, FileItem } from \"@dropzone-ui/react\";\nimport { useState } from 'react';\nimport { API_SERVER } from \"../../config/constant\";\n\nimport './dropfiles.css';\n\nfunction Dropfiles(props) {\n    const { id, files, setFiles, onUploaded } = props;\n    const [showArrow, setShowArror] = useState(false);\n\n    const updateFiles = (incommingFiles) => {\n        // console.log(incommingFiles)\n        if (incommingFiles.length === 0) {\n            setShowArror(false);\n            return;\n        }\n        setFiles(incommingFiles);\n        setShowArror(true);\n    };\n\n    const onDelete = (id) => {\n        const newFiles = files.filter((x) => x.id !== id);\n        if (newFiles.length === 0) {\n            setShowArror(false);\n        }\n        setFiles(newFiles);\n        \n    };\n\n    const uploadFinished = (files) => {\n        // console.log(`Uploaded ${files.length} files`);\n        onUploaded();\n        setShowArror(false);\n    }\n\n    return (\n        <div className=\"dropfiles\">\n            <h3 className=\"dropfile-header\">Upload your files here</h3>\n            {showArrow ? <div className=\"arrow bounce\"></div> : null}\n            <Dropzone\n                accept=\".svg\"\n                label=\"Drop your svg files here\"\n                onChange={updateFiles}\n                value={files}\n                maxFiles={100}\n                maxFileSize={1024000}\n                url={`${API_SERVER}upload-files/${id}`}\n                onUploadFinish={uploadFinished} >\n                {files.map((file) => (\n                    <FileItem onDelete={onDelete} {...file} preview />\n                ))}\n            </Dropzone>\n        </div>\n    );\n}\n\nexport default Dropfiles;\n","import './checkBoxItem.css';\n\nconst CheckBoxItem = (props) => {\n    const { checked, onClick, id, section, label } = props;\n\n    const onCheck = () => {\n        onClick(section, id, !checked);\n    }\n\n    return (\n        <div className=\"cbx-item\">\n            <input\n                className=\"inp-cbx\"\n                id={id}\n                checked={checked}\n                onChange={onCheck}\n                type=\"checkbox\"\n                style={{display: \"none\"}} />\n            <label className=\"cbx\"htmlFor={id}>\n                <span>\n                    <svg width=\"12px\" height=\"10px\" viewBox=\"0 0 12 10\">\n                        <polyline points=\"1.5 6 4.5 9 10.5 1\"></polyline>\n                    </svg>\n                </span>\n                <span>{label}</span>\n            </label>\n        </div>\n    )\n}\n\nexport default CheckBoxItem;","import './inputFieldItem.css';\n\nconst InputFieldItem = (props) => {\n    const { labels, onChange, id, section, header } = props;\n\n    const onIdChange = (e) => {\n        const value = e.target.value.replace(' ', '').split(',');\n        onChange(section, id, value);\n    }\n\n    return (\n        <label htmlFor=\"inp\" className=\"inp\">\n            <input type=\"text\" id=\"inp\" value={labels} onChange={onIdChange} />\n                <span className=\"label\">{header}</span>\n                <span className=\"focus-bg\"></span>\n        </label>\n    )\n}\n\nexport default InputFieldItem;","// import downloadjs from 'downloadjs';\nimport { API_SERVER } from \"../../config/constant\";\n\nimport './controls.css';\n\nconst Controls = (props) => {\n    const { downloadId, optimized, onOptimize, uploaded, loader } = props;\n \n    const onDownload = async () => {\n        try {\n            const res = await fetch(`${API_SERVER}download/${downloadId}`);\n            const blob = await res.blob();\n            const element = document.createElement(\"a\");\n            element.href = URL.createObjectURL(blob);\n            element.download = 'svghmi.zip'\n            document.body.appendChild(element); // Required for this to work in FireFox\n            element.click(); // simulate link click\n            // downloadjs(blob, 'svghmi.zip');\n        } catch (Err) {\n            console.error('Something went wrong with downloading...');\n        }\n        \n    }\n\n    const onClick = async () => {\n        if (uploaded && !optimized) {\n            onOptimize();\n        } else if (optimized) {\n            onDownload();\n        }\n    }\n\n    let spanClass = loader ? 'loader' : 'btnText';\n    let spanText = optimized ? 'Download' : 'Convert';\n    let btnClass = 'btnCtrl';\n    if (loader) {\n        spanText = '';\n    }\n    if (!uploaded && !optimized) {\n        btnClass += ' btnDisabled';\n        spanText = 'Upload before';\n    }\n\n    return (\n        <>\n            <button \n                className={btnClass}\n                onClick={onClick}>\n                    <span className={spanClass}>{spanText}</span>\n            </button>\n        </>\n    );\n}\n\nexport default Controls;\n","import './error.css';\n\nconst Error = (props) => {\n    return (\n        <div className=\"error-message\">\n            <span className=\"error-text\">{props.text}</span>\n        </div>\n    )\n}\n\nexport default Error;\n","import CheckBoxItem from \"../checkBoxItem/checkBoxItem\";\nimport InputFieldItem from \"../inputFieldItem/inputFieldItem\";\nimport Controls from \"../controls/controls\";\nimport Error from \"../error/error\";\n\nimport './svghmi-preferences.css';\n\nconst SvghmiPreferences = (props) => {\n    const { config, onConfigChanged, error } = props;\n\n    const ShowColorControl = config.optimization.connectBgColor ? \n        <InputFieldItem\n            section=\"optimization\"\n            id=\"bgColorId\"\n            header=\"Element's IDs (comma separated)\"\n            labels={config.optimization.bgColorId}\n            onChange={onConfigChanged} />\n        : null;\n    \n    let removeIds = '';\n    config.svgo.forEach(elem => {\n        if (elem.name === 'removeAttrs') {\n            const str = elem.params.attrs;\n            removeIds = str.slice(1, str.length - 1);\n        }\n    });\n\n    return (\n        <div className='svghmi-preferences'>\n            <Controls\n                onOptimize={props.onOptimize}\n                downloadId={props.downloadId}\n                loader={props.loader}\n                uploaded={props.uploaded}\n                optimized={props.optimized} />\n            {error ? <Error text=\"=( Sorry, something went wrong, try another svg files...\" /> : null}\n            <div className=\"wrap-collabsible\">\n                <input id=\"collapsible1\" className=\"toggle\" type=\"checkbox\" />\n                <label htmlFor=\"collapsible1\" className=\"lbl-toggle\">Options</label>\n                <div className=\"collapsible-content\">\n                    <div className=\"content-inner\">\n                        <CheckBoxItem\n                            id=\"addDefaults\"\n                            label=\"Add default values into Gradients\"\n                            section=\"optimization\"\n                            checked={config.optimization.addDefaults}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"delGradientTransform\"\n                            label=\"Remove <gradientTransform> attribute and recalculate x(cx), y(cy)\"\n                            section=\"optimization\"\n                            checked={config.optimization.delGradientTransform}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"delRefs\"\n                            label=\"Delete href and xlink:href in gradients\"\n                            section=\"optimization\"\n                            checked={config.optimization.delRefs}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"moveGradients\"\n                            label=\"Move gradients to <defs/>\"\n                            section=\"optimization\"\n                            checked={config.optimization.moveGradients}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"addFlipInterface\"\n                            label=\"Add Flip interface into SVGHMI\"\n                            section=\"optimization\"\n                            checked={config.optimization.addFlipInterface}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"convertShapeToPath\"\n                            label=\"Shape to Path\"\n                            section=\"svgo\"\n                            checked={config.svgo.includes(\"convertShapeToPath\")}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"polyToPath\"\n                            label=\"Poly to Path\"\n                            section=\"optimization\"\n                            checked={config.optimization.polyToPath}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"convertColors\"\n                            label=\"convert colors from rgb() to #rrggbb, from #rrggbb to #rgb\"\n                            section=\"svgo\"\n                            checked={config.svgo.includes(\"convertColors\")}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"removeDimensions\"\n                            label=\"Remove Width/Height and add viewBox if it's missing \"\n                            section=\"svgo\"\n                            checked={config.svgo.includes(\"removeDimensions\")}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"connectBgColor\"\n                            label=\"Attach bgColorXX to BasicColor interface property\"\n                            section=\"optimization\"\n                            checked={config.optimization.connectBgColor}\n                            onClick={onConfigChanged} />\n                        {ShowColorControl}\n                        <InputFieldItem\n                            section=\"svgo\"\n                            id=\"removeAttrs\"\n                            header=\"Remove user defined Ids (comma separated)\"\n                            labels={removeIds}\n                            onChange={onConfigChanged} />\n                    </div>\n                </div>\n            </div>\n            <div className=\"wrap-collabsible\">\n                <input id=\"collapsible2\" className=\"toggle\" type=\"checkbox\" />\n                <label htmlFor=\"collapsible2\" className=\"lbl-toggle\">Options Help</label>\n                <div className=\"collapsible-content\">\n                    <div className=\"content-inner\">\n                        <div className=\"option-text\">\n                            <h4>Add default values</h4>\n                            <p className=\"paragraphDesc\">Linear and Radial gradients can be without some attributes.\n                                For example <i>\"stop-color\" and \"stop-opacity\"</i>,\n                                for LinearGradient can be <i>\"x1\", \"x2\", \"y1\", \"y2\"</i>, for RadialGradient can be <i>\"cx\", \"cy\"</i>.\n                                When this option is activated program adds default value for \"stop-color\" it will be black color,\n                                for \"stop-opacity\" is null.\n                            </p>\n                        </div>\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Remove gradientTransform</h4>\n                            <p className=\"paragraphDesc\">Some Vector Graphics Editors can add <i>gradientTransform</i> attributes to Gradients,\n                                and <i>WinCC Unified</i> don't \"understand\" it and displays it as black.\n                                This option try to recalculate transformed coordinates to x and y. Sometimes it can break gradient.</p>\n                        </div>\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Delete <i>href</i> and <i>xlink:href</i> in gradients</h4>\n                            <p className=\"paragraphDesc\">Some gradients can link to other gradients. And WinCC doesn't \"understand\" such gradients. and displays it as black. Thus these attributes must be removed to display correctly.</p>\n                        </div>\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Move Gradients to \"defs\"</h4>\n                            <p className=\"paragraphDesc\">Moving all gradients in document to <i>defs</i> element.</p>\n                        </div>\n\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Add Flip interface</h4>\n                            <p className=\"paragraphDesc\">Optionally you can add a flip property to mirror the widget horizontally.</p>\n                        </div>\n\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Convert Shape to Path</h4>\n                            <p className=\"paragraphDesc\">Optionally you can convert all shapes like (rectangle, circle ellipse, etc.) to path element.</p>\n                        </div>\n\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Convert Poly to Path</h4>\n                            <p className=\"paragraphDesc\">WinCC doesn't \"understand\" polyline and polygon, so by default it will be converted to path element.</p>\n                        </div>\n\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Convert colors from rgb() to #rrggbb, from #rrggbb to #rgb</h4>\n                            <p className=\"paragraphDesc\">Optionally you can unify colors to one type.</p>\n                        </div>\n\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Remove Width and Height</h4>\n                            <p className=\"paragraphDesc\">Remove from svg attributes width and height for better display in WinCC.</p>\n                        </div>\n\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Attach bgColor to BasicColor</h4>\n                            <p className=\"paragraphDesc\">You can specify the ids of the elements you want to change the color from the WinCC poperties. By default, the application searches for all IDs with the name <i>bgColor</i> and binds the fill attribute of svg element to the property with name BasicColor. All ids that have <i>bgColor</i> in the name will be bind to BasicColor. Separated by commas, you can specify several ID names to which you want to assign color change properties. For example, the string <i>bgColor,AlternateColor,AnotherColor</i> will result in the creation of three property fields <i>BasicColor</i>, <i>AlternateColor1</i>, <i>AlternateColor2</i>. If the elements with the specified IDs are not found in the svg document, then the property field associated with it will not be added.</p>\n                        </div>\n                        <div className=\"option-text\">\n                            <h4 className=\"option-header\">Delete user defined attributes</h4>\n                            <p className=\"paragraphDesc\">Optionaly you can delete from svg attributes what you want. Because some vector editors can add there custom attributes. And WinCC will throw the error if find it.</p>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SvghmiPreferences;\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport AppInfo from '../app-info/app-info';\nimport Dropfiles from '../dropfiles/dropfiles';\nimport SvghmiPreferences from '../svghmi-preferences/svghmi-preferences';\n\nimport { API_SERVER, CONFIG_DEFAULT } from './../../config/constant';\n\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clientId: uuidv4().split('-').join(''),\n            downloadId: '',\n            files: [],\n            optimizeConf: CONFIG_DEFAULT,\n            optimized: false,\n            uploaded: false,\n            loader: false,\n            error: false,\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const res = await fetch('https://geolocation-db.com/json/');\n            const data = await res.json();\n            await fetch(`${API_SERVER}user_from`, {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data),\n            })\n        } catch (Err) {\n            console.log('Fetch error...');\n        }\n    }\n\n    setFiles = (files) => {\n        this.setState({ files });\n    }\n\n    optimizeFiles = async (conf) => {\n        this.setState({\n            files: [],\n            loader: true,\n        });\n        // remove empty bgColor ids\n        const ids = this.state.optimizeConf.optimization.bgColorId.filter((elem) => elem !== '');\n        const { optimizeConf } = this.state;\n        optimizeConf.optimization.bgColorId = ids;\n        if (ids.length === 1 && ids[0] === '') {\n            optimizeConf.optimization.connectBgColor = false;\n        }\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(optimizeConf),\n        };\n\n        try {\n            const response = await fetch(`${API_SERVER}optimize/${this.state.clientId}`, options);\n            await response.json()\n            if (response.status) {\n                this.setState((prevState) => ({\n                    optimized: true,\n                    uploaded: false,\n                    downloadId: prevState.clientId,\n                    clientId: uuidv4().split('-').join(''),\n                    loader: false,\n                    error: false,\n                }));\n            }\n        } catch (Err) {\n            console.error('Something went wrong...');\n            this.setState((prevState) => ({\n                optimized: false,\n                uploaded: false,\n                downloadId: prevState.clientId,\n                clientId: uuidv4().split('-').join(''),\n                loader: false,\n                error: true,\n            }));\n        }\n    }\n\n    onConfigChanged = (section, id, value) => {\n        if (section === 'optimization') {\n            this.setState((prev) => {\n                const newConf = { ...prev.optimizeConf };\n                newConf[section][id] = value;\n                return { optimizeConf: newConf };\n            });\n        }\n        if (section === 'svgo') {\n            if (id === 'removeAttrs') {\n                this.setState((prev) => {\n                    let newConf = { ...prev.optimizeConf };\n                    newConf.svgo = newConf.svgo.map((elem) => {\n                        if (elem.name === 'removeAttrs') {\n                            return {\n                                name: 'removeAttrs',\n                                params: {\n                                    attrs: `(${value})`,\n                                },\n                            };\n                        }\n                        return elem;\n                    })\n                    newConf.svgo = newConf.svgo.filter(elem => elem !== id);\n                    return { optimizeConf: newConf };\n                });\n                return;\n            }\n            this.setState((prev) => {\n                let newConf = { ...prev.optimizeConf };\n                if (newConf.svgo.includes(id)) {\n                    newConf.svgo = newConf.svgo.filter(elem => elem !== id);\n                } else {\n                    newConf.svgo.push(id);\n                }\n                return { optimizeConf: newConf };\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <header className=\"color-full clear-fix\">\n                    <div className=\"text_color_full block3\">\n                        SVG to <span className='svghmi'>SVGHMI</span>\n                    </div>\n                </header>\n                <AppInfo />\n                <Dropfiles\n                    files={this.state.files}\n                    setFiles={this.setFiles}\n                    onUploaded={() => (this.setState({ optimized: false, uploaded: true }))}\n                    id={this.state.clientId} />\n                <SvghmiPreferences\n                    error={this.state.error}\n                    onOptimize={this.optimizeFiles}\n                    downloadId={this.state.downloadId}\n                    loader={this.state.loader}\n                    uploaded={this.state.uploaded}\n                    optimized={this.state.optimized}\n                    config={this.state.optimizeConf}\n                    onConfigChanged={this.onConfigChanged} />\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import { Component } from 'react';\n\nclass LoginForm extends Component {\n    render() {\n        const Input = ({ id, type, label, disabled }) => (\n            <input className=\"form-group__input\" type={type} id={id} placeholder={label} disabled={disabled}/>\n        );\n\n        return (\n        <form onSubmit={this.props.onSubmit}>\n            <div className=\"form-block__input-wrapper\">\n                <div className=\"form-group form-group--login\">\n                    <Input type=\"text\" id=\"username\" label=\"user name\" disabled={this.props.mode === 'signup'}/>\n                    <Input type=\"password\" id=\"password\" label=\"password\" disabled={this.props.mode === 'signup'}/>\n                </div>\n                <div className=\"form-group form-group--signup\">\n                    <Input type=\"text\" id=\"fullname\" label=\"full name\" disabled={this.props.mode === 'login'} />\n                    <Input type=\"email\" id=\"email\" label=\"email\" disabled={this.props.mode === 'login'} />\n                    <Input type=\"password\" id=\"createpassword\" label=\"password\" disabled={this.props.mode === 'login'} />\n                    <Input type=\"password\" id=\"repeatpassword\" label=\"repeat password\" disabled={this.props.mode === 'login'} />\n                </div>\n            </div>\n            <button className=\"button button--primary full-width\" type=\"submit\">{this.props.mode === 'login' ? 'Log In' : 'Sign Up'}</button>\n        </form>\n        )\n    }\n}\n\nexport default LoginForm;","import { Component } from 'react';\nimport LoginForm from '../LoginForm/loginForm';\n// import './loginComponent.css';\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: this.props.mode\n        }\n    }\n    toggleMode() {\n        var newMode = this.state.mode === 'login' ? 'signup' : 'login';\n        this.setState({ mode: newMode});\n    }\n    render() {\n        return (\n            <div>\n                <div className={`form-block-wrapper form-block-wrapper--is-${this.state.mode}`} ></div>\n                <section className={`form-block form-block--is-${this.state.mode}`}>\n                    <header className=\"form-block__header\">\n                        <h1>{this.state.mode === 'login' ? 'Welcome back!' : 'Sign up'}</h1>\n                        <div className=\"form-block__toggle-block\">\n                            <span>{this.state.mode === 'login' ? 'Don\\'t' : 'Already'} have an account? Click here &#8594;</span>\n                            <input id=\"form-toggler\" type=\"checkbox\" onClick={this.toggleMode.bind(this)} />\n                            <label htmlFor=\"form-toggler\"></label>\n                        </div>\n                    </header>\n                    <LoginForm mode={this.state.mode} onSubmit={this.props.onSubmit} />\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default LoginComponent;\n\n\n\n// const App = () => (\n//     <div className={`app app--is-${mode}`}>\n        \n//     </div>\n// );\n\n\n","import { Component } from 'react';\nimport Main from '../pages/main';\nimport LoginComponent from '../LoginComponent/loginComponent';\n\nimport {\n    Routes, Route,\n} from 'react-router-dom';\n\nimport './app.css';\nimport './baner.css';\n\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Routes>\n                    <Route exact path=\"/\" element={<Main />} />\n                    <Route exact path=\"/login\" element={<LoginComponent />} />\n                </Routes>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport { BrowserRouter } from 'react-router-dom';\nimport { BASE_TITLE } from './config/constant';\n\nimport './index.css';\n\ndocument.title = `${BASE_TITLE} | Professional Engineering Tool`;\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}