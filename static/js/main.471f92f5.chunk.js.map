{"version":3,"sources":["components/app-info/app-info.js","config/constant.js","components/dropfiles/dropfiles.js","components/checkBoxItem/checkBoxItem.js","components/controls/controls.js","components/svghmi-preferences/svghmi-preferences.js","components/app/app.js","index.js"],"names":["AppInfo","className","API_SERVER","CONFIG_DEFAULT","svgo","name","params","attrs","optimization","delRefs","moveGradients","addDefaults","delGradientTransform","connectBgColor","bgColorId","addFlipInterface","Dropfiles","props","id","files","setFiles","onUploaded","onDelete","filter","x","accept","label","onChange","incommingFiles","value","handleClean","maxFiles","maxFileSize","url","onUploadFinish","map","file","preview","CheckBoxItem","checked","onClick","section","type","htmlFor","Controls","downloadId","optimized","onOptimize","uploaded","loader","onDownload","fetch","res","blob","downloadjs","spanClass","spanText","btnClass","SvghmiPreferences","config","onConfigChanged","includes","App","setState","optimizeFiles","conf","options","method","headers","body","JSON","stringify","state","optimizeConf","clientId","response","json","status","prevState","uuidv4","split","join","prev","newConf","elem","push","data","mode","console","log","this","Component","document","title","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.471f92f5.chunk.js","sourcesContent":["import \"./app-info.css\";\n\nconst AppInfo = () => {\n    return (\n        <div className=\"app-info\">\n            <h1>A simple tool for creating dynamic widgets (SVGHMI)</h1>\n            <p className=\"infoBlock\">With this tool your can easily convert your SVG files to Siemens WinCC Unified format <i>SVGHMI</i>\n            and create dynamic widgets in just a couple of steps</p>\n            <ul>\n                <li>First of all you need some svg file for convertion</li>\n                <li>Choose or Drag'n'Drop you files into field below</li>\n                <li>Push upload button</li>\n                <li>Push Convert button</li>\n                <li>And finaly download your ready zip archive</li>\n            </ul>\n            <p className=\"infoBlock\">If you want more flexibility you can tune convertion process with some options</p>\n        </div>\n    )\n}\n\nexport default AppInfo;","export const BASE_TITLE = 'SVG to SVGHMI';\r\n// export const API_SERVER = 'http://localhost:2800/';\r\n// export const API_SERVER = 'http://192.168.7.141:2800/';\r\nexport const API_SERVER = 'https://server.cirillsokolov.com:2800/';\r\nexport const CONFIG_DEFAULT = {\r\n    svgo: [\r\n        'convertStyleToAttrs',\r\n        'removeUnusedNS',\r\n        'convertColors',\r\n        'removeEditorsNSData',\r\n        'removeDoctype',\r\n        'removeDimensions',\r\n        'removeMetadata',\r\n        'sortDefsChildren',\r\n        'sortAttrs',\r\n        'moveGroupAttrsToElems',\r\n        {\r\n            name: 'removeAttrs',\r\n            params: {\r\n                attrs: '(sketch|stroke-dasharray)',\r\n            },\r\n        },\r\n    ],\r\n    optimization: {\r\n        delRefs: true,\r\n        moveGradients: true,\r\n        addDefaults: true,\r\n        delGradientTransform: true,\r\n        connectBgColor: true,\r\n        bgColorId: 'bgColor',\r\n        addFlipInterface: true,\r\n    }\r\n}","import { Dropzone, FileItem } from \"@dropzone-ui/react\";\nimport { API_SERVER } from \"../../config/constant\";\n\nimport './dropfiles.css';\n\nfunction Dropfiles(props) {\n    const { id, files, setFiles, onUploaded } = props;\n    const updateFiles = (incommingFiles) => {\n        // console.log(incommingFiles)\n        setFiles(incommingFiles);\n    };\n\n    const onDelete = (id) => {\n        setFiles(files.filter((x) => x.id !== id));\n    };\n\n    const handleClean = (files) => {\n        // console.log(\"list cleaned\", files);\n    };\n\n    const uploadFinished = (files) => {\n        // console.log(`Uploaded ${files.length} files`);\n        onUploaded();\n    }\n\n    return (\n        <div className=\"dropfiles\">\n            <h3>Upload your files here</h3>\n            <Dropzone\n                accept=\".svg\"\n                label=\"Drop your svg files here\"\n                onChange={updateFiles}\n                value={files}\n                handleClean={handleClean}\n                maxFiles={100}\n                maxFileSize={1024000}\n                url={`${API_SERVER}upload-files/${id}`}\n                onUploadFinish={uploadFinished} >\n                {files.map((file) => (\n                    <FileItem onDelete={onDelete} {...file} preview />\n                ))}\n            </Dropzone>\n        </div>\n    );\n}\n\nexport default Dropfiles;\n","import './checkBoxItem.css';\r\n\r\nconst CheckBoxItem = (props) => {\r\n    const { checked, onClick, id, section, label } = props;\r\n\r\n    const onCheck = () => {\r\n        onClick(section, id, !checked);\r\n    }\r\n\r\n    return (\r\n        <div className=\"item\">\r\n            <div className=\"checkbox-rect\">\r\n                <input type=\"checkbox\" id={id} name=\"check\" checked={checked} onChange={onCheck} />\r\n                <label htmlFor={id}>{label}</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckBoxItem;","import downloadjs from 'downloadjs';\r\nimport { API_SERVER } from \"../../config/constant\";\r\n\r\nimport './controls.css';\r\n\r\nconst Controls = (props) => {\r\n    const { downloadId, optimized, onOptimize, uploaded, loader } = props;\r\n \r\n    const onDownload = async () => {\r\n        const res = await fetch(`${API_SERVER}download/${downloadId}`);\r\n        const blob = await res.blob();\r\n        downloadjs(blob, 'svghmi.zip');\r\n    }\r\n\r\n    const onClick = async () => {\r\n        if (uploaded && !optimized) {\r\n            onOptimize();\r\n        } else if (optimized) {\r\n            onDownload();\r\n        }\r\n    }\r\n\r\n    let spanClass = loader ? 'loader' : 'btnText';\r\n    let spanText = optimized ? 'Download' : 'Convert';\r\n    let btnClass = 'btnCtrl';\r\n    if (loader) {\r\n        spanText = '';\r\n    }\r\n    if (!uploaded && !optimized) {\r\n        btnClass += ' btnDisabled';\r\n        spanText = 'Upload before';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button \r\n                className={btnClass}\r\n                onClick={onClick}>\r\n                    <span className={spanClass}>{spanText}</span>\r\n            </button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Controls;\r\n","import CheckBoxItem from \"../checkBoxItem/checkBoxItem\";\nimport Controls from \"../controls/controls\";\n\nimport './svghmi-preferences.css';\n\nconst SvghmiPreferences = (props) => {\n    const { config, onConfigChanged } = props;\n\n    return (\n        <div className='svghmi-preferences'>\n            <Controls\n                onOptimize={props.onOptimize}\n                downloadId={props.downloadId}\n                loader={props.loader}\n                uploaded={props.uploaded}\n                optimized={props.optimized} />\n            <div className=\"wrap-collabsible\">\n                <input id=\"collapsible1\" className=\"toggle\" type=\"checkbox\" />\n                <label htmlFor=\"collapsible1\" className=\"lbl-toggle\">Options</label>\n                <div className=\"collapsible-content\">\n                    <div className=\"content-inner\">\n                        <CheckBoxItem\n                            id=\"addDefaults\"\n                            label=\"Add default values into Gradients\"\n                            section=\"optimization\"\n                            checked={config.optimization.addDefaults}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"delGradientTransform\"\n                            label=\"Remove <gradientTransform> attribute and recalculate x(cx), y(cy)\"\n                            section=\"optimization\"\n                            checked={config.optimization.delGradientTransform}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"delRefs\"\n                            label=\"Delete href and xlink:href in gradients\"\n                            section=\"optimization\"\n                            checked={config.optimization.delRefs}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"moveGradients\"\n                            label=\"Move gradients to <defs/>\"\n                            section=\"optimization\"\n                            checked={config.optimization.moveGradients}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"addFlipInterface\"\n                            label=\"Add Flip interface into SVGHMI\"\n                            section=\"optimization\"\n                            checked={config.optimization.addFlipInterface}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"convertShapeToPath\"\n                            label=\"Convert Shapes to Path\"\n                            section=\"svgo\"\n                            checked={config.svgo.includes(\"convertShapeToPath\")}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"convertColors\"\n                            label=\"convert colors from rgb() to #rrggbb, from #rrggbb to #rgb\"\n                            section=\"svgo\"\n                            checked={config.svgo.includes(\"convertColors\")}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"connectBgColor\"\n                            label=\"Attach bgColorXX to BasicColor interface property\"\n                            section=\"optimization\"\n                            checked={config.optimization.connectBgColor}\n                            onClick={onConfigChanged} />\n                        <CheckBoxItem\n                            id=\"removeDimensions\"\n                            label=\"Remove Width/Height and add viewBox if it's missing \"\n                            section=\"svgo\"\n                            checked={config.svgo.includes(\"removeDimensions\")}\n                            onClick={onConfigChanged} />\n                    </div>\n                </div>\n            </div>\n            <div className=\"wrap-collabsible\">\n                <input id=\"collapsible2\" className=\"toggle\" type=\"checkbox\" />\n                <label htmlFor=\"collapsible2\" className=\"lbl-toggle\">Options Help</label>\n                <div className=\"collapsible-content\">\n                    <div className=\"content-inner\">\n                        <h4>Add default values</h4>\n                        <p className=\"paragraphDesc\">Linear and Radial gradients can be without some attributes.\n                            For example <i>\"stop-color\" and \"stop-opacity\"</i>,\n                            for LinearGradient can be <i>\"x1\", \"x2\", \"y1\", \"y2\"</i>, for RadialGradient can be <i>\"cx\", \"cy\"</i>.\n                            When this option is activated program adds default value for \"stop-color\" it will be black color,\n                            for \"stop-opacity\" is null.\n                        </p>\n                        <h4>Remove gradientTransform</h4>\n                        <p className=\"paragraphDesc\">Some Vector Graphics Editors can add <i>gradientTransform</i> attributes to Gradients,\n                        and <i>WinCC Unified</i> don't understand it and displays it as black.\n                        This option try to recalculate transformed coordinates to x and y. Sometimes it can break gradient.</p>\n                        <h4>Delete <i>href</i> and <i>xlink:href</i> in gradients</h4>\n                        <p className=\"paragraphDesc\">description</p>\n                        <h4>Move Gradients to \"defs\"</h4>\n                        <p className=\"paragraphDesc\">description</p>\n                        <h4>Add Flip interface</h4>\n                        <h4>Convert all Shapes to Path</h4>\n                        <p className=\"paragraphDesc\">description</p>\n                        <h4>Convert colors from rgb() to #rrggbb, from #rrggbb to #rgb</h4>\n                        <p className=\"paragraphDesc\">description</p>\n                        <h4>Attach bgColor to BasicColor</h4>\n                        <p className=\"paragraphDesc\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum</p>\n                        <h4>delete user defined attributes</h4>\n                        <p className=\"paragraphDesc\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum</p>\n\n                        <h4>remove custom attributes like \"stroke-dasharray\"</h4>\n                        <p className=\"paragraphDesc\">description</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SvghmiPreferences;\n","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport AppInfo from '../app-info/app-info';\nimport Dropfiles from '../dropfiles/dropfiles';\nimport SvghmiPreferences from '../svghmi-preferences/svghmi-preferences';\nimport { API_SERVER, CONFIG_DEFAULT } from './../../config/constant';\n\nimport './app.css';\nimport './baner.css';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clientId: uuidv4().split('-').join(''),\n            downloadId: '',\n            files: [],\n            optimizeConf: CONFIG_DEFAULT,\n            optimized: false,\n            uploaded: false,\n            loader: false,\n        }\n    }\n\n    async componentDidMount() {\n        try {\n            const res = await fetch('https://geolocation-db.com/json/');\n            const data = await res.json();\n            await fetch(`${API_SERVER}user_from`, {\n                method: 'POST',\n                mode: 'cors',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data),\n            })\n        } catch (Err) {\n            console.log('Fetch error...');\n        }\n\n    }\n\n    setFiles = (files) => {\n        this.setState({ files });\n    }\n\n    optimizeFiles = async (conf) => {\n        this.setState({\n            files: [],\n            loader: true,\n        });\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state.optimizeConf),\n        };\n        const response = await fetch(`${API_SERVER}optimize/${this.state.clientId}`, options);\n        await response.json()\n        if (response.status) {\n            this.setState((prevState) => ({\n                optimized: true,\n                uploaded: false,\n                downloadId: prevState.clientId,\n                clientId: uuidv4().split('-').join(''),\n                loader: false,\n            }));\n        }\n    }\n\n    onConfigChanged = (section, id, value) => {\n        if (section === 'optimization') {\n            this.setState((prev) => {\n                const newConf = { ...prev.optimizeConf };\n                newConf[section][id] = value;\n                return { optimizeConf: newConf };\n            });\n        }\n        if (section === 'svgo') {\n            this.setState((prev) => {\n                let newConf = { ...prev.optimizeConf };\n                if (newConf.svgo.includes(id)) {\n                    newConf.svgo = newConf.svgo.filter(elem => elem !== id);\n                } else {\n                    newConf.svgo.push(id);\n                }\n                return { optimizeConf: newConf };\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <header className=\"color-full clear-fix\">\n                    <div className=\"text_color_full block3\">\n                        SVG to <span className='svghmi'>SVGHMI</span>\n                    </div>\n                </header>\n                <AppInfo />\n                <Dropfiles\n                    files={this.state.files}\n                    setFiles={this.setFiles}\n                    onUploaded={() => (this.setState({ optimized: false, uploaded: true }))}\n                    id={this.state.clientId} />\n\n                <SvghmiPreferences\n                    onOptimize={this.optimizeFiles}\n                    downloadId={this.state.downloadId}\n                    loader={this.state.loader}\n                    uploaded={this.state.uploaded}\n                    optimized={this.state.optimized}\n                    config={this.state.optimizeConf}\n                    onConfigChanged={this.onConfigChanged} />\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\nimport { BASE_TITLE } from './config/constant';\n\nimport './index.css';\n\ndocument.title = `${BASE_TITLE} | Professional Engineering Tool`;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}